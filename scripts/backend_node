#!/usr/bin/env node
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const app = express();
var mysql = require('mysql');
const PORT = process.env.PORT || 5000;
const rosnodejs = require('rosnodejs');
const { exec, spawn } = require('child_process');
var psTree = require('ps-tree');

rosnodejs.initNode('/backend_node');
const SetMapping = rosnodejs.require('slam_itbdelabo').srv.SetMapping;
const SetOwnMap = rosnodejs.require('slam_itbdelabo').srv.SetOwnMap;
const std_msgs = rosnodejs.require('std_msgs').msg;
const nh = rosnodejs.nh;

let roslaunch_child = undefined;
let map_saver_child = undefined;
let map_server_child = undefined;

let setMappingSrv = nh.serviceClient('/set_mapping', 'slam_itbdelabo/SetMapping');

var conn = mysql.createConnection({
    host: "",
    user: "",
    password: "",
    database : ""
  });
  
  conn.connect(function(err) {
    if (err) throw err;
    rosnodejs.log.info("Connected to MySQL Database");
});
const map_path = '/home/<user>/catkin_ws/src/ROS-dashboard-backend/map'

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cors({
    origin: '*'
}));

// Home API
app.get('/', (req, res) => {
    res.status(200).json({ success: true, data: "ROS Dashboard Backend API"});
});

// Set Mapping API (Start, Pause, Stop)
app.post('/api/mapping', (req, res) => {
    const {start, pause, stop} = req.body;
    const timeout = 5000;
    if (stop) {
        const ts = Date.now();
        const date_ob = new Date(ts);
        const year = date_ob.getFullYear();
        const month = date_ob.getMonth() + 1;
        const date = date_ob.getDate();
        const hours = date_ob.getHours();
        const minutes = date_ob.getMinutes();
        const seconds = date_ob.getSeconds();
        const map_name = `${year}-${month}-${date}_${hours}-${minutes}-${seconds}`;
        const commandToExecute = `rosrun map_server map_saver -f ${map_path}/${map_name}`;
        map_saver_child = spawn(commandToExecute, {shell: true});

        map_saver_child.stdout.on('data', (data) => {
            console.log(`${data}`);
        });
        
        map_saver_child.stderr.on('data', (data) => {
            console.error(`${data}`);
        });

        map_saver_child.on('close', (code) => {
            console.log(`child process exited with code ${code}`);
        });
    }
    let setMappingReq = new SetMapping.Request();
    setMappingReq.start = start, setMappingReq.pause = pause, setMappingReq.stop = stop;
    setMappingSrv.call(setMappingReq).then((setMappingRes) => {
        if (setMappingRes.success) {
            res.status(200).json({ success: true, msg: "Mapping request success"});
        }
        else {
            if (setMappingRes.code === 1) {
                res.status(503).json({success: false, msg: "/map topic is not available"})
            }
            else if (setMappingRes.code === 2){
                res.status(400).json({success: false, msg: "Invalid request, only one action can be set"});
            }
            else if (setMappingRes.code === 3){
                res.status(504).json({success: false, msg: "Map failed to save"})
            }
            else {
                res.status(500).json({success: false, msg: "Internal server error"})
            }
        }
    });
})

// LIDAR API (Enable, Disable)
app.post('/api/lidar', (req, res) => {
    const {enable, use_own_map} = req.body;
    if (enable) {
        let commandToExecute = '';
        if (enable && !use_own_map) {
            commandToExecute = 'roslaunch slam_itbdelabo compute_slam.launch';
        }
        else if (enable && use_own_map) {
            commandToExecute = 'roslaunch slam_itbdelabo compute_slam.launch use_own_map:=true';
        }
        roslaunch_child = spawn(commandToExecute, {shell: true});

        roslaunch_child.stdout.on('data', (data) => {
            console.log(`${data}`);
        });
        
        roslaunch_child.stderr.on('data', (data) => {
            console.error(`${data}`);
        });

        roslaunch_child.on('close', (code) => {
            console.log(`child process exited with code ${code}`);
        });
        
        res.status(200).json({success: true, msg: "Lidar enabled"});
    }
    else {
        if (roslaunch_child === undefined) {
            res.status(200).json({success: true, msg: "Lidar disabled"});
        }
        else {
            psTree(roslaunch_child.pid, function (err, children) {
                spawn('kill', ['-9'].concat(children.map(function (p) { return p.PID })));
            });
            res.status(200).json({success: true, msg: "Lidar disabled"});
        }
    }
})

// Set Own Map API
app.post('/api/set_own_map', (req, res) => {
    const {enable, map_name} = req.body;
    if (enable) {
        const yaml_file = map_name.replace('.pgm', '.yaml');
        const commandToExecute = `rosrun map_server map_server ${map_path}/${yaml_file}`;
        map_server_child = spawn(commandToExecute, {shell: true});

        map_server_child.stdout.on('data', (data) => {
            console.log(`${data}`);
        });
        
        map_server_child.stderr.on('data', (data) => {
            console.error(`${data}`);
        });

        map_server_child.on('close', (code) => {
            console.log(`child process exited with code ${code}`);
        });
        res.status(200).json({success: true, msg: "Enable own map success"});
    }
    else {
        if (map_server_child === undefined) {
            res.status(200).json({success: true, msg: "Disable own map success"});
        }
        else {
            psTree(map_server_child.pid, function (err, children) {
                spawn('kill', ['-9'].concat(children.map(function (p) { return p.PID })));
            });
            res.status(200).json({success: true, msg: "Disable own map success"});
        }
    }
})

// Get PGM Map Data API
app.get('/api/pgm_data', (req, res) => {
    conn.query('SELECT map_name, modified_time, file_type, file_size FROM pgm_data', (err, rows, fields) => {
        if (!err) {
            res.status(200).json({success: true, data: rows});
        }
        else {
            res.status(500).json({success: false, msg: "Internal Server Error"});
        }
    })
});

// Get YAML Map Metadata API
app.get('/api/yaml_data', (req, res) => {
    conn.query('SELECT file_name, modified_time, file_type, file_size FROM yaml_data', (err, rows, fields) => {
        if (!err) {
            res.status(200).json({success: true, data: rows});
        }
        else {
            res.status(500).json({success: false, msg: "Internal Server Error"});
        }
    })
});

// DELETE PGM Map API
app.delete('/api/pgm_data', (req, res) => {
    const {map_name} = req.body;
    conn.query('DELETE FROM pgm_data WHERE map_name = ?', [map_name], (err, rows, fields) => {
        if (!err) {
            if (rows.affectedRows !== 0) {
                res.status(200).json({success: true, msg: `${map_name} map data deleted successfully`});
            } 
            else {
                res.status(404).json({success: false, msg: `${map_name} map data not found`});
            }
        }
        else {
            res.status(500).json({success: false, msg: "Internal Server Error"});
        }
    });
});

// DELETE YAML Map Metadata API
app.delete('/api/yaml_data', (req, res) => {
    const {map_name} = req.body;
    conn.query('DELETE FROM yaml_data WHERE file_name = ?', [map_name], (err, rows, field) => {
        if (!err) {
            if (rows.affectedRows !== 0) {
                res.status(200).json({success: true, msg: `${map_name} map metadata deleted successfully`});
            }
            else {
                res.status(404).json({success: false, msg: `${map_name} map metadata not found`});
            }
        }
        else {
            res.status(500).json({success: false, msg: "Internal Server Error"});
        }
    });      
});

app.listen(PORT,"0.0.0.0", () => console.log(`ROS Dashboard Backend API is running at 0.0.0.0:${PORT}`));