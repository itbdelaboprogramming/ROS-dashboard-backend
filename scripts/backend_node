#!/usr/bin/env node
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const app = express();
var mysql = require('mysql');
const PORT = process.env.PORT || 5000;
const rosnodejs = require('rosnodejs');
const { exec, spawn } = require('child_process');
var psTree = require('ps-tree');

rosnodejs.initNode('/backend_node');
const SetMapping = rosnodejs.require('slam_itbdelabo').srv.SetMapping;
const SetOwnMap = rosnodejs.require('slam_itbdelabo').srv.SetOwnMap;
const std_msgs = rosnodejs.require('std_msgs').msg;
const nh = rosnodejs.nh;

let roslaunch_child = undefined;

let setMappingSrv = nh.serviceClient('/set_mapping', 'slam_itbdelabo/SetMapping');
let setOwnMapSrv = nh.serviceClient('/set_own_map', 'slam_itbdelabo/SetOwnMap')

var conn = mysql.createConnection({
    host: "",
    user: "",
    password: "",
    database : ""
  });
  
  conn.connect(function(err) {
    if (err) throw err;
    rosnodejs.log.info("Connected to MySQL Database");
});


app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cors({
    origin: '*'
}));

app.get('/', (req, res) => {
    res.status(200).json({ success: true, data: "ROS Dashboard Backend API"});
});

app.post('/api/mapping', (req, res) => {
    const {start, pause, stop} = req.body;
    const timeout = 2000;
    nh.waitForService('/set_mapping', timeout) // wait for ROS Service availability (timeout 2 seconds)
        .then((available) => {
            if (available) {
                let setMappingReq = new SetMapping.Request();
                setMappingReq.start = start, setMappingReq.pause = pause, setMappingReq.stop = stop;
                setMappingSrv.call(setMappingReq).then((setMappingRes) => {
                    if (setMappingRes.success) {
                        res.status(200).json({ success: true, msg: "Mapping request success"});
                    }
                    else {
                        if (setMappingRes.code === 1) {
                            res.status(503).json({success: false, msg: "/map topic is not available"})
                        }
                        else if (setMappingRes.code === 2){
                            res.status(400).json({success: false, msg: "Invalid request, only one action can be set"});
                        }
                        else if (setMappingRes.code === 3){
                            res.status(504).json({success: false, msg: "Map failed to save"})
                        }
                        else {
                            res.status(500).json({success: false, msg: "Internal server error"})
                        }
                    }
                });
            }
            else {
                res.status(503).json({success: false, msg: "ROS Service is not available"});
            }
        });
})

app.post('/api/lidar', (req, res) => {
    const {enable, use_own_map} = req.body;
    if (enable) {
        let commandToExecute = '';
        if (enable && !use_own_map) {
            commandToExecute = 'roslaunch slam_itbdelabo compute_slam.launch';
        }
        else if (enable && use_own_map) {
            commandToExecute = 'roslaunch slam_itbdelabo compute_slam.launch use_own_map:=true';
        }
        roslaunch_child = spawn(commandToExecute, {shell: true});
        res.status(200).json({success: true, msg: "Lidar enabled"});
    }
    else {
        if (roslaunch_child === undefined) {
            res.status(200).json({success: true, msg: "Lidar disabled"});
        }
        else {
            psTree(roslaunch_child.pid, function (err, children) {
                spawn('kill', ['-9'].concat(children.map(function (p) { return p.PID })));
            });
            res.status(200).json({success: true, msg: "Lidar disabled"});
        }
    }
})

app.post('/api/set_own_map', (req, res) => {
    const {enable, map_name} = req.body;
    const timeout = 2000;
    nh.waitForService('/set_own_map', timeout) // wait for ROS Service availability (timeout 2 seconds)
        .then((available) => {
            if (available) {
                let setOwnMapReq = new SetOwnMap.Request();
                setOwnMapReq.enable = enable, setOwnMapReq.map_name = map_name;
                setOwnMapSrv.call(setOwnMapReq).then((setOwnMapRes) => {
                    if (setOwnMapRes.success) {
                        res.status(200).json({ success: true, msg: "Set own map request success"});
                    }
                    else {
                        res.status(500).json({success: false, msg: "Internal rosservice error"})
                    }
                })
            }
            else {
                res.status(503).json({success: false, msg: "ROS Service is not available"});
            }
        });
})

app.get('/api/pgm_data', (req, res) => {
    conn.query('SELECT map_name, modified_time, file_type, file_size FROM pgm_data', (err, rows, fields) => {
        if (!err) {
            // save pgm data to file, change file path accordingly
            // var fs = require('fs');
            // const decodedData = Buffer.from(rows[7].data, 'base64');
            // output_file_path = "/home/<user>/catkin_ws/src/ROS-dashboard-backend/map.pgm";
            // fs.writeFile(output_file_path, decodedData, (err) => {
            //     if (err) {throw err;}
            //     console.log('The pgm file has been saved!');
            // });

            res.status(200).json({success: true, data: rows});
        }
        else {
            res.status(500).json({success: false, msg: "Internal Server Error"});
        }
    })
});

app.get('/api/yaml_data', (req, res) => {
    conn.query('SELECT file_name, modified_time, file_type, file_size FROM yaml_data', (err, rows, fields) => {
        if (!err) {
            // save yaml data to file, change file path accordingly
            // const yaml = require('js-yaml');
            // const parsedYaml = yaml.load(rows[1].data, 'utf8');
            // var fs = require('fs');
            // output_file_path = "/home/<user>/catkin_ws/src/ROS-dashboard-backend/map.yaml";
            // fs.writeFile(output_file_path, yaml.dump(parsedYaml, { indent: 2 }), (err) => {
            //     if (err) {throw err;}
            //     console.log('The yaml file has been saved!');
            // });

            res.status(200).json({success: true, data: rows});
        }
        else {
            res.status(500).json({success: false, msg: "Internal Server Error"});
        }
    })
});

app.listen(PORT,"0.0.0.0", () => console.log(`ROS Dashboard API is running at 0.0.0.0:${PORT}`));